<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>Hugo操作</title><url>/post/hugo%E6%93%8D%E4%BD%9C/</url><categories/><tags/><content type="html"><![CDATA[  更新打开 PowerShell / cmd 终端，打开最初用 hugo 搭建的博客所在的文件夹，以我为例： cd e:\myblog 1 第一步： 新建一个 markdown(.md) 格式的文件： hugo new post/FileName.md 1 其中 FileName 为自定义的文件名
第二步： 输入命令：
hugo &ndash;theme=hugo-theme-next &ndash;baseURL=&ldquo;https://wtwtyyds.github.io&rdquo; &ndash;buildDrafts
hugo &ndash;theme=hugo-tranquilpeak-theme &ndash;baseUrl=&ldquo;https://tzq0301.github.io&rdquo; &ndash;buildDrafts 1 其中，hugo-tranquilpeak-theme 是我所应用的主题，https://tzq0301.github.io 是我的GitHub中为hugo博客配置的仓库
第三步： 把博客部署到远程GitHub仓库
首先切换到 public 文件夹： cd public 1 此时，正处于 e:\myblog\public 中
接下来输入以下指令： git add . git commit -m &ldquo;yyyy/mm/dd-hh:mm&rdquo; git push -u origin master 1 2 3 其中 yyyy/mm/dd-hh:mm 为每次提交的名称，引号内可以随意更改，yyyy/mm/dd-hh:mm 是我个人采用的格式，以时间做标记可保证不会重复
现在刷新GitHub，登陆个人博客查看即可
删除Hugo没有直接提供一个 undraft 命令来删除文章。在Hugo中，你可以通过修改文章的 front matter（前置元数据）来实现文章的删除。
以下是在Windows系统下使用Hugo删除文章并将更改推送到GitHub的步骤：
打开命令提示符或PowerShell，并导航到你的Hugo网站目录。
找到需要删除的文章，并打开它。文章通常位于 content/post/ 目录下。
在文件的 front matter（位于文章开头的元数据部分，包含在两组 +++ 之间）中，将 draft 设置为 false 或者删除 draft 行。例如：
+++ title = &#34;Your Article Title&#34; date = 2022-07-07T12:00:00Z draft = false +++ 将 draft = false 修改为 draft = true 或者删除整行。
保存并关闭文章文件。
在命令提示符或PowerShell中使用Git命令进行提交。运行以下命令：
git add . git commit -m &#34;删除文章: your-article.md&#34; 提示：你可以根据需要自定义提交消息。
使用Git命令将更改推送到GitHub上。运行以下命令：
git push origin master 确保将 origin 替换为你的远程存储库的名称，master 替换为你正在使用的分支名称。
这样，你的更改就会从本地Hugo网站仓库推送到GitHub仓库，并且对应的文章将被删除。
希望这个步骤可以帮助到你。如有任何进一步的问题，请随时向我提问。
  ]]></content></entry><entry><title>关于 Hugo NexT 组织</title><url>/about.html</url><categories/><tags/><content type="html"> Hugo NexT 组织是由众多喜爱 NexT 主题及风格的世界各地友人共同组建而成，为的就是让这个主题继续在 Hugo 引擎中也能得到发扬光大，在此也欢迎你的加入！
我们的愿景
延续 NexT 经典的黑白调搭配，保持简单的易用性及强大的功能。
使用反馈
加入 GitHub Discussions
或 Gitter
在线讨论 🍻 GitHub Issues
提交错误报告 🐛 GitHub Feature
表新功能的想法 ✨ 同时国内用户也可加入 QQ 群交流： 604710815</content></entry><entry><title/><url>/post/gee%E5%AD%A6%E4%B9%A0/</url><categories/><tags/><content type="html"><![CDATA[  Gee学习单元测试：Go Test 单元测试简明教程 | 快速入门 | 极客兔兔 (geektutu.com)Gee框架的雏形1.将所有的HTTP请求转向了我们自己的处理逻辑。我们拦截了所有的HTTP请求，拥有了统一的控制入口。在这里我们可以自由定义路由映射的规则，也可以统一添加一些处理逻辑，例如日志、异常处理等。
我们接下来重新组织上面的代码，搭建出整个框架的雏形。
最终的代码目录结构是这样的。
gee/ |--gee.go	//实现基本的get,post+uRl.path/run运行/Sever HTTP实现 |--go.mod	//打包管理 main.go go.mod 实现: 1.定义Engine结构体 router map[string]HandlerFunc 2.获取设置的get,post/path 并处理保存 3.run	监听端口, http.ListenAndServe(addr, engine)	传入engine处理器 并实现ServerHTTP 获取请求的URL,path是否存在, 存在则传入w,req处理 router的func module example go 1.13 require gee v0.0.0 replace gee =&amp;gt; ./gee 在 go.mod 中使用 replace 将 gee 指向 ./gee 从 go 1.11 版本开始，引用相对路径的 package 需要使用上述方式。
gee包需要有go.mod文件
项目Gee的go.mod需要引入gee 版本，和处理路径，
replace gee =&amp;gt; ./gee
go: malformed module path &amp;ldquo;gee&amp;rdquo;: missing dot in first path element go: gee@v0.0.0: malformed module path &amp;ldquo;gee&amp;rdquo;: missing dot in first path element
2.将路由(router)独立出来，方便之后增强。
设计上下文(Context)，封装 Request 和 Response ，提供对 JSON、HTML 等返回类型的支持。
Handler的参数变成成了gee.Context，提供了查 …  ]]></content></entry><entry><title>站点示例</title><url>/flinks.html</url><categories/><tags/><content type="html"> 如想交换本站友情链接，请在评论区留下你的站点信息，格式参考如下：
- name: Hugo-NexT desc: Hugo NexT 官方预览网站。 avatar: https://hugo-next.eu.org/imgs/hugo_next_avatar.png link: https://hugo-next.eu.org</content></entry></search>